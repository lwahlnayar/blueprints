{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\EditModal.js\";\nimport React from \"react\";\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\nimport Input from \"./Input\";\n\nvar EditModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditModal, _React$Component);\n\n  function EditModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditModal).call(this, props)); //form input data gets populated in THIS state and sent to parent state\n\n    _this.state = _objectSpread({}, _this.props.blueprintData);\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createFields = _this.createFields.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditModal, [{\n    key: \"reset\",\n    value: function reset() {\n      this.setState(_objectSpread({}, this.prevState));\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        showModal: !this.state.showModal\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (e.target.dataset.cap === \"command\") {\n        var commands = _toConsumableArray(this.state.commands);\n\n        commands[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          commands: commands\n        });\n      } else if (e.target.dataset.cap === \"attribute\") {\n        var att = _toConsumableArray(this.state.attributes);\n\n        att[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          attributes: att\n        });\n      } else if (e.target.dataset.cap === \"sensor\") {\n        var sensors = _toConsumableArray(this.state.sensors);\n\n        sensors[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          sensors: sensors\n        });\n      }\n    }\n  }, {\n    key: \"createFields\",\n    value: function createFields(cap) {\n      var basic = {\n        name: \"\",\n        value: \"\"\n      };\n      var sensor = {\n        name: \"\",\n        value: \"\",\n        data_type: \"\",\n        comment: \"\"\n      };\n      return cap === \"commands\" || cap === \"attributes\" ? this.setState(_defineProperty({}, cap, _toConsumableArray(this.state[cap]).concat([basic]))) : this.setState(_defineProperty({}, cap, _toConsumableArray(this.state[cap]).concat([sensor])));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          commands = _this$state.commands,\n          attributes = _this$state.attributes,\n          sensors = _this$state.sensors,\n          name = _this$state.name,\n          comment = _this$state.comment;\n      var editBlueprint = this.props.editBlueprint;\n      return React.createElement(\"div\", {\n        className: \"createModal-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.prevState = _this2.state;\n\n          _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: function toggle() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        size: \"fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Edit Blueprint\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"blueprint-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Name\")), React.createElement(\"input\", {\n        value: name,\n        name: \"blueprint-name\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            name: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Comment\")), React.createElement(\"input\", {\n        value: comment,\n        name: \"comment\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            comment: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Commands\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          return _this2.createFields(\"commands\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Add Command\"), React.createElement(Input, {\n        type: \"command\",\n        handleChange: this.handleChange,\n        capability: commands,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Sensors\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          return _this2.createFields(\"sensors\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Add Sensors\"), React.createElement(Input, {\n        type: \"sensor\",\n        handleChange: this.handleChange,\n        capability: sensors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Attributes\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          return _this2.createFields(\"attributes\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Add Attributes\"), React.createElement(Input, {\n        type: \"attribute\",\n        handleChange: this.handleChange,\n        capability: attributes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          editBlueprint(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Edit Blueprint\"))));\n    }\n  }]);\n\n  return EditModal;\n}(React.Component);\n\nexport { EditModal as default };","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\EditModal.js"],"names":["React","Button","Modal","ModalBody","ModalHeader","ModalFooter","Input","EditModal","props","state","blueprintData","handleChange","bind","createFields","setState","prevState","showModal","e","target","dataset","cap","commands","id","className","value","att","attributes","sensors","basic","name","sensor","data_type","comment","editBlueprint","toggle","reset","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\r\n\r\nimport Input from \"./Input\";\r\n\r\nexport default class EditModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //form input data gets populated in THIS state and sent to parent state\r\n        this.state = { ...this.props.blueprintData };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.createFields = this.createFields.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        this.setState({ ...this.prevState });\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ showModal: !this.state.showModal });\r\n    }\r\n\r\n    handleChange(e) {\r\n        if (e.target.dataset.cap === \"command\") {\r\n            let commands = [...this.state.commands];\r\n            commands[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ commands });\r\n        } else if (e.target.dataset.cap === \"attribute\") {\r\n            let att = [...this.state.attributes];\r\n            att[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ attributes: att });\r\n        } else if (e.target.dataset.cap === \"sensor\") {\r\n            let sensors = [...this.state.sensors];\r\n            sensors[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ sensors });\r\n        }\r\n    }\r\n\r\n    createFields(cap) {\r\n        let basic = { name: \"\", value: \"\" };\r\n        let sensor = { name: \"\", value: \"\", data_type: \"\", comment: \"\" };\r\n        return cap === \"commands\" || cap === \"attributes\"\r\n            ? this.setState({\r\n                  [cap]: [...this.state[cap], basic]\r\n              })\r\n            : this.setState({\r\n                  [cap]: [...this.state[cap], sensor]\r\n              });\r\n    }\r\n\r\n    render() {\r\n        let { commands, attributes, sensors, name, comment } = this.state;\r\n        let { editBlueprint } = this.props;\r\n\r\n        return (\r\n            <div className=\"createModal-component\">\r\n                <Button\r\n                    color=\"green\"\r\n                    onClick={() => {\r\n                        this.prevState = this.state;\r\n                        this.toggle();\r\n                    }}\r\n                >\r\n                    Edit\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    toggle={() => {\r\n                        this.toggle();\r\n                        this.reset();\r\n                    }}\r\n                    size=\"fluid\"\r\n                >\r\n                    <ModalHeader\r\n                        toggle={() => {\r\n                            this.toggle();\r\n                            this.reset();\r\n                        }}\r\n                    >\r\n                        Edit Blueprint\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            <b>\r\n                                <label htmlFor=\"blueprint-name\">Name</label>\r\n                            </b>\r\n                            <input\r\n                                value={name}\r\n                                name=\"blueprint-name\"\r\n                                onChange={e => {\r\n                                    this.setState({ name: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <label htmlFor=\"comment\">Comment</label>\r\n                            </b>\r\n                            <input\r\n                                value={comment}\r\n                                name=\"comment\"\r\n                                onChange={e => {\r\n                                    this.setState({ comment: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Commands</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => this.createFields(\"commands\")}\r\n                            >\r\n                                Add Command\r\n                            </Button>\r\n                            <Input\r\n                                type={\"command\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={commands}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Sensors</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => this.createFields(\"sensors\")}\r\n                            >\r\n                                Add Sensors\r\n                            </Button>\r\n                            <Input\r\n                                type={\"sensor\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={sensors}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Attributes</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => this.createFields(\"attributes\")}\r\n                            >\r\n                                Add Attributes\r\n                            </Button>\r\n                            <Input\r\n                                type={\"attribute\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={attributes}\r\n                            />\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                this.reset();\r\n                            }}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                editBlueprint(this.state);\r\n                            }}\r\n                        >\r\n                            Edit Blueprint\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
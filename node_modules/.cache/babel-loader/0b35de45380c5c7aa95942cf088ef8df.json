{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\CreateModal.js\";\nimport React from \"react\";\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\n\nvar CreateModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateModal, _React$Component);\n\n  function CreateModal(props) {\n    var _this;\n\n    _classCallCheck(this, CreateModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateModal).call(this, props));\n    _this.state = {\n      showModal: false,\n      commands: [{\n        name: \"command\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(CreateModal, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        showModal: !this.state.showModal\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var commands = this.state.commands;\n      var _this$props = this.props,\n          updateBlueprints = _this$props.updateBlueprints,\n          handleChange = _this$props.handleChange;\n      var commandsHtml = commands.map(function (val, idx) {\n        var nameId = \"name-\".concat(idx),\n            commandId = \"command-\".concat(idx);\n        return React.createElement(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: nameId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, \"Name #\".concat(idx + 1)), React.createElement(\"input\", {\n          type: \"text\",\n          name: nameId,\n          \"data-id\": idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          htmlFor: commandId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, \"Command #\".concat(idx + 1)), React.createElement(\"input\", {\n          type: \"text\",\n          name: commandId,\n          \"data-id\": idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"createModal-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Create\"), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        size: \"fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Blueprint\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        name: \"name\",\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Comment\"), React.createElement(\"input\", {\n        name: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Commands\"), React.createElement(Button, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Add Command\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Sensors\"), React.createElement(Button, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Add Sensors\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Attributes\"), React.createElement(Button, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Add Attributes\"))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          updateBlueprints();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Create Blueprint\"))));\n    }\n  }]);\n\n  return CreateModal;\n}(React.Component);\n\nexport { CreateModal as default };","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\CreateModal.js"],"names":["React","Button","Modal","ModalBody","ModalHeader","ModalFooter","CreateModal","props","state","showModal","commands","name","setState","updateBlueprints","handleChange","commandsHtml","map","val","idx","nameId","commandId","toggle","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { showModal: false, commands: [{ name: \"command\" }] };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { commands } = this.state;\r\n        let { updateBlueprints, handleChange } = this.props;\r\n\r\n        let commandsHtml = commands.map((val, idx) => {\r\n            let nameId = `name-${idx}`,\r\n                commandId = `command-${idx}`;\r\n            return (\r\n                <div key={idx}>\r\n                    <label htmlFor={nameId}>{`Name #${idx + 1}`}</label>\r\n                    <input type=\"text\" name={nameId} data-id={idx} />\r\n                    <label htmlFor={commandId}>{`Command #${idx + 1}`}</label>\r\n                    <input type=\"text\" name={commandId} data-id={idx} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"createModal-component\">\r\n                <Button color=\"primary\" onClick={() => this.toggle()}>\r\n                    Create\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    toggle={() => this.toggle()}\r\n                    size=\"fluid\"\r\n                >\r\n                    <ModalHeader toggle={() => this.toggle()}>\r\n                        Blueprint\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <input name=\"name\" onChange={handleChange} />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"comment\">Comment</label>\r\n                            <input name=\"comment\" />\r\n                        </div>\r\n                        <div>\r\n                            <p>Commands</p>\r\n                            <Button color=\"green\">Add Command</Button>\r\n                        </div>\r\n                        <div>\r\n                            <p>Sensors</p>\r\n                            <Button color=\"green\">Add Sensors</Button>\r\n                        </div>\r\n                        <div>\r\n                            <p>Attributes</p>\r\n                            <Button color=\"green\">Add Attributes</Button>\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={() => this.toggle()}>\r\n                            Close\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                updateBlueprints();\r\n                            }}\r\n                        >\r\n                            Create Blueprint\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
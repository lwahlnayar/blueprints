{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\EditModal.js\";\nimport React from \"react\";\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\nimport Input from \"./Input\";\n\nvar CreateModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateModal, _React$Component);\n\n  function CreateModal(props) {\n    var _this;\n\n    _classCallCheck(this, CreateModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateModal).call(this, props)); //form input data gets populated in THIS state and sent to parent state\n\n    _this.state = {\n      showModal: false,\n      name: _this.props.blueprintData.name,\n      blueprint_uuid: _this.props.blueprintData.blueprint_uuid,\n      comment: _this.props.blueprintData.comment,\n      commands: _this.props.blueprintData.commands,\n      sensors: _this.props.blueprintData.sensors,\n      attributes: _this.props.blueprintData.attributes\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    return _this;\n  }\n\n  _createClass(CreateModal, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        showModal: !this.state.showModal\n      });\n    } // handleChange(e) {\n    //     if (e.target.dataset.cap === \"command\") {\n    //         let commands = [...this.state.commands];\n    //         commands[e.target.dataset.id][e.target.className] = e.target.value;\n    //         this.setState({ commands });\n    //     } else if (e.target.dataset.cap === \"attribute\") {\n    //         let att = [...this.state.attributes];\n    //         att[e.target.dataset.id][e.target.className] = e.target.value;\n    //         this.setState({ attributes: att });\n    //     } else if (e.target.dataset.cap === \"sensor\") {\n    //         let sensors = [...this.state.sensors];\n    //         sensors[e.target.dataset.id][e.target.className] = e.target.value;\n    //         this.setState({ sensors });\n    //     }\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          commands = _this$state.commands,\n          attributes = _this$state.attributes,\n          sensors = _this$state.sensors;\n      var submitBlueprint = this.props.submitBlueprint;\n      return React.createElement(\"div\", {\n        className: \"createModal-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        size: \"fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Blueprint\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"blueprint-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Name\")), React.createElement(\"input\", {\n        name: \"blueprint-name\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            name: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Comment\")), React.createElement(\"input\", {\n        name: \"comment\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            comment: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Commands\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            commands: _toConsumableArray(_this2.state.commands).concat([{\n              name: \"\",\n              value: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Add Command\"), React.createElement(Input, {\n        type: \"command\",\n        handleChange: this.handleChange,\n        capability: commands,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Sensors\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            sensors: _toConsumableArray(_this2.state.sensors).concat([{\n              name: \"\",\n              value: \"\",\n              data_type: \"\",\n              comment: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Add Sensors\"), React.createElement(Input, {\n        type: \"sensor\",\n        handleChange: this.handleChange,\n        capability: sensors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Attributes\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            attributes: _toConsumableArray(_this2.state.attributes).concat([{\n              name: \"\",\n              value: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Add Attributes\"), React.createElement(Input, {\n        type: \"attribute\",\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          submitBlueprint(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Create Blueprint\"))));\n    }\n  }]);\n\n  return CreateModal;\n}(React.Component);\n\nexport { CreateModal as default };","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\EditModal.js"],"names":["React","Button","Modal","ModalBody","ModalHeader","ModalFooter","Input","CreateModal","props","state","showModal","name","blueprintData","blueprint_uuid","comment","commands","sensors","attributes","setState","submitBlueprint","toggle","e","target","value","handleChange","data_type","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\r\n\r\nimport Input from \"./Input\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //form input data gets populated in THIS state and sent to parent state\r\n        this.state = {\r\n            showModal: false,\r\n            name: this.props.blueprintData.name,\r\n            blueprint_uuid: this.props.blueprintData.blueprint_uuid,\r\n            comment: this.props.blueprintData.comment,\r\n            commands: this.props.blueprintData.commands,\r\n            sensors: this.props.blueprintData.sensors,\r\n            attributes: this.props.blueprintData.attributes\r\n        };\r\n        // this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            showModal: !this.state.showModal\r\n        });\r\n    }\r\n\r\n    // handleChange(e) {\r\n    //     if (e.target.dataset.cap === \"command\") {\r\n    //         let commands = [...this.state.commands];\r\n    //         commands[e.target.dataset.id][e.target.className] = e.target.value;\r\n    //         this.setState({ commands });\r\n    //     } else if (e.target.dataset.cap === \"attribute\") {\r\n    //         let att = [...this.state.attributes];\r\n    //         att[e.target.dataset.id][e.target.className] = e.target.value;\r\n    //         this.setState({ attributes: att });\r\n    //     } else if (e.target.dataset.cap === \"sensor\") {\r\n    //         let sensors = [...this.state.sensors];\r\n    //         sensors[e.target.dataset.id][e.target.className] = e.target.value;\r\n    //         this.setState({ sensors });\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        let { commands, attributes, sensors } = this.state;\r\n        let { submitBlueprint } = this.props;\r\n\r\n        return (\r\n            <div className=\"createModal-component\">\r\n                <Button color=\"green\" onClick={() => this.toggle()}>\r\n                    Edit\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    toggle={() => this.toggle()}\r\n                    size=\"fluid\"\r\n                >\r\n                    <ModalHeader toggle={() => this.toggle()}>\r\n                        Blueprint\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            <strong>\r\n                                <label htmlFor=\"blueprint-name\">Name</label>\r\n                            </strong>\r\n                            <input\r\n                                name=\"blueprint-name\"\r\n                                onChange={e => {\r\n                                    this.setState({ name: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <strong>\r\n                                <label htmlFor=\"comment\">Comment</label>\r\n                            </strong>\r\n                            <input\r\n                                name=\"comment\"\r\n                                onChange={e => {\r\n                                    this.setState({ comment: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <strong>\r\n                                <p>Commands</p>\r\n                            </strong>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        commands: [\r\n                                            ...this.state.commands,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Command\r\n                            </Button>\r\n                            <Input\r\n                                type={\"command\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={commands}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <strong>\r\n                                <p>Sensors</p>\r\n                            </strong>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        sensors: [\r\n                                            ...this.state.sensors,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\",\r\n                                                data_type: \"\",\r\n                                                comment: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Sensors\r\n                            </Button>\r\n                            <Input\r\n                                type={\"sensor\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={sensors}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <strong>\r\n                                <p>Attributes</p>\r\n                            </strong>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        attributes: [\r\n                                            ...this.state.attributes,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Attributes\r\n                            </Button>\r\n                            <Input\r\n                                type={\"attribute\"}\r\n                                handleChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={() => this.toggle()}>\r\n                            Close\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                submitBlueprint(this.state);\r\n                            }}\r\n                        >\r\n                            Create Blueprint\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
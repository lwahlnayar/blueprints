{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\Input.js\";\nimport React from \"react\"; //creates input fields for each capability on click\n\nexport default function Input(props) {\n  var type = props.type,\n      handleChange = props.handleChange;\n  return props.capability.map(function (val, idx) {\n    var nameId = \"\".concat(type, \"-name-\").concat(idx);\n    var valueId = \"\".concat(type, \"-value-\").concat(idx);\n    var dataTypeId = \"\".concat(type, \"-data_type-\").concat(idx);\n    var commentId = \"\".concat(type, \"-comment-\").concat(idx);\n\n    function inputGenerator(idStrings, str1, str2) {\n      console.log(val[str2]);\n      return React.createElement(\"div\", {\n        className: \"input-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: idStrings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"\".concat(str1, \" #\").concat(idx + 1)), React.createElement(\"input\", {\n        type: \"text\",\n        name: idStrings,\n        \"data-id\": idx,\n        \"data-cap\": type,\n        className: str2,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, inputGenerator(nameId, \"Name\", \"name\"), inputGenerator(valueId, \"Value\", \"value\"), type === \"sensor\" && inputGenerator(dataTypeId, \"Data Type\", \"data_type\"), type === \"sensor\" && inputGenerator(commentId, \"Comment\", \"comment\"));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\Input.js"],"names":["React","Input","props","type","handleChange","capability","map","val","idx","nameId","valueId","dataTypeId","commentId","inputGenerator","idStrings","str1","str2","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,MACzBC,IADyB,GACFD,KADE,CACzBC,IADyB;AAAA,MACnBC,YADmB,GACFF,KADE,CACnBE,YADmB;AAEjC,SAAOF,KAAK,CAACG,UAAN,CAAiBC,GAAjB,CAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,QAAIC,MAAM,aAAMN,IAAN,mBAAmBK,GAAnB,CAAV;AACA,QAAIE,OAAO,aAAMP,IAAN,oBAAoBK,GAApB,CAAX;AACA,QAAIG,UAAU,aAAMR,IAAN,wBAAwBK,GAAxB,CAAd;AACA,QAAII,SAAS,aAAMT,IAAN,sBAAsBK,GAAtB,CAAb;;AAEA,aAASK,cAAT,CAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACS,IAAD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA+BC,IAA/B,eAAwCP,GAAG,GAAG,CAA9C,EADJ,EAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,IAAI,EAAEM,SAFV;AAGI,mBAASN,GAHb;AAII,oBAAUL,IAJd;AAKI,QAAA,SAAS,EAAEa,IALf;AAMI,QAAA,QAAQ,EAAEZ,YANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAaH;;AAED,WACI;AAAK,MAAA,GAAG,EAAEI,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKK,cAAc,CAACJ,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADnB,EAEKI,cAAc,CAACH,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAFnB,EAGKP,IAAI,KAAK,QAAT,IACGU,cAAc,CAACF,UAAD,EAAa,WAAb,EAA0B,WAA1B,CAJtB,EAKKR,IAAI,KAAK,QAAT,IACGU,cAAc,CAACD,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CANtB,CADJ;AAUH,GAjCM,CAAP;AAkCH","sourcesContent":["import React from \"react\";\r\n//creates input fields for each capability on click\r\nexport default function Input(props) {\r\n    const { type, handleChange } = props;\r\n    return props.capability.map((val, idx) => {\r\n        let nameId = `${type}-name-${idx}`;\r\n        let valueId = `${type}-value-${idx}`;\r\n        let dataTypeId = `${type}-data_type-${idx}`;\r\n        let commentId = `${type}-comment-${idx}`;\r\n\r\n        function inputGenerator(idStrings, str1, str2) {\r\n            console.log(val[str2]);\r\n            return (\r\n                <div className=\"input-container\">\r\n                    <label htmlFor={idStrings}>{`${str1} #${idx + 1}`}</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name={idStrings}\r\n                        data-id={idx}\r\n                        data-cap={type}\r\n                        className={str2}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div key={idx}>\r\n                {inputGenerator(nameId, \"Name\", \"name\")}\r\n                {inputGenerator(valueId, \"Value\", \"value\")}\r\n                {type === \"sensor\" &&\r\n                    inputGenerator(dataTypeId, \"Data Type\", \"data_type\")}\r\n                {type === \"sensor\" &&\r\n                    inputGenerator(commentId, \"Comment\", \"comment\")}\r\n            </div>\r\n        );\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
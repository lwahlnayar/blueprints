{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\CreateModal.js\";\nimport React from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\n\nvar CreateModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateModal, _React$Component);\n\n  function CreateModal(props) {\n    var _this;\n\n    _classCallCheck(this, CreateModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateModal).call(this, props));\n    _this.state = {\n      showModal: false,\n      name: \"\",\n      blueprint_uuid: uuidv4(),\n      comment: \"placeholder\",\n      commands: [{\n        name: \"command\"\n      }],\n      sensors: [],\n      attributes: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addCommand = _this.addCommand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CreateModal, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        showModal: !this.state.showModal,\n        commands: [{\n          name: \"command\"\n        }]\n      });\n    }\n  }, {\n    key: \"addCommand\",\n    value: function addCommand() {\n      this.setState({\n        commands: _toConsumableArray(this.state.commands).concat([{\n          name: \"command\"\n        }])\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (e.target.name == \"blueprint-name\") {\n        this.setState({\n          name: e.target.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var commands = this.state.commands;\n      var updateBlueprints = this.props.updateBlueprints;\n      var commandsHtml = commands.map(function (val, idx) {\n        var nameId = \"name-\".concat(idx),\n            commandId = \"command-\".concat(idx);\n        return React.createElement(\"div\", {\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          htmlFor: nameId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Name #\".concat(idx + 1)), React.createElement(\"input\", {\n          type: \"text\",\n          name: nameId,\n          \"data-id\": idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          htmlFor: commandId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"Command #\".concat(idx + 1)), React.createElement(\"input\", {\n          type: \"text\",\n          name: commandId,\n          \"data-id\": idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"createModal-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Create\"), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        size: \"fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Blueprint\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"blueprint-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        name: \"blueprint-name\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Comment\"), React.createElement(\"input\", {\n        name: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Commands\"), React.createElement(Button, {\n        color: \"green\",\n        onClick: this.addCommand,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Add Command\"), commandsHtml), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Sensors\"), React.createElement(Button, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Add Sensors\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Attributes\"), React.createElement(Button, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Add Attributes\"))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          updateBlueprints(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Create Blueprint\"))));\n    }\n  }]);\n\n  return CreateModal;\n}(React.Component);\n\nexport { CreateModal as default };","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\CreateModal.js"],"names":["React","uuidv4","Button","Modal","ModalBody","ModalHeader","ModalFooter","CreateModal","props","state","showModal","name","blueprint_uuid","comment","commands","sensors","attributes","handleChange","bind","addCommand","setState","e","target","value","updateBlueprints","commandsHtml","map","val","idx","nameId","commandId","toggle","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport uuidv4 from \"uuid/v4\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            name: \"\",\r\n            blueprint_uuid: uuidv4(),\r\n            comment: \"placeholder\",\r\n            commands: [{ name: \"command\" }],\r\n            sensors: [],\r\n            attributes: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addCommand = this.addCommand.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            showModal: !this.state.showModal,\r\n            commands: [{ name: \"command\" }]\r\n        });\r\n    }\r\n\r\n    addCommand() {\r\n        this.setState({\r\n            commands: [...this.state.commands, { name: \"command\" }]\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        if (e.target.name == \"blueprint-name\") {\r\n            this.setState({ name: e.target.value });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { commands } = this.state;\r\n        let { updateBlueprints } = this.props;\r\n\r\n        let commandsHtml = commands.map((val, idx) => {\r\n            let nameId = `name-${idx}`,\r\n                commandId = `command-${idx}`;\r\n            return (\r\n                <div key={idx}>\r\n                    <label htmlFor={nameId}>{`Name #${idx + 1}`}</label>\r\n                    <input type=\"text\" name={nameId} data-id={idx} />\r\n                    <label htmlFor={commandId}>{`Command #${idx + 1}`}</label>\r\n                    <input type=\"text\" name={commandId} data-id={idx} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"createModal-component\">\r\n                <Button color=\"primary\" onClick={() => this.toggle()}>\r\n                    Create\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    toggle={() => this.toggle()}\r\n                    size=\"fluid\"\r\n                >\r\n                    <ModalHeader toggle={() => this.toggle()}>\r\n                        Blueprint\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            <label htmlFor=\"blueprint-name\">Name</label>\r\n                            <input\r\n                                name=\"blueprint-name\"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"comment\">Comment</label>\r\n                            <input name=\"comment\" />\r\n                        </div>\r\n                        <div>\r\n                            <p>Commands</p>\r\n                            <Button color=\"green\" onClick={this.addCommand}>\r\n                                Add Command\r\n                            </Button>\r\n                            {commandsHtml}\r\n                        </div>\r\n                        <div>\r\n                            <p>Sensors</p>\r\n                            <Button color=\"green\">Add Sensors</Button>\r\n                        </div>\r\n                        <div>\r\n                            <p>Attributes</p>\r\n                            <Button color=\"green\">Add Attributes</Button>\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={() => this.toggle()}>\r\n                            Close\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                updateBlueprints(this.state);\r\n                            }}\r\n                        >\r\n                            Create Blueprint\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
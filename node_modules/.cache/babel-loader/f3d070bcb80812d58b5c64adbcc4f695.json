{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\Input.js\";\nimport React from \"react\"; //creates input fields for each capability on click\n\nexport default function Input(props) {\n  var type = props.type;\n  return props.capability.map(function (val, idx) {\n    var nameId = \"\".concat(type, \"-name-\").concat(idx);\n    var valueId = \"\".concat(type, \"-value-\").concat(idx);\n    var dataTypeId = \"\".concat(type, \"-data_type-\").concat(idx);\n    var commentId = \"\".concat(type, \"-comment-\").concat(idx);\n\n    function inputGenerator(idStrings, str1, str2) {\n      return React.createElement(\"div\", {\n        className: \"input-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: idStrings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"\".concat(str1, \" #\").concat(idx + 1)), React.createElement(\"input\", {\n        type: \"text\",\n        name: idStrings,\n        \"data-id\": idx,\n        className: \"\".concat(type, \"-\").concat(str2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, inputGenerator(nameId, \"Name\", \"name\"), inputGenerator(valueId, \"Value\", \"value\"), type === \"sensor\" && inputGenerator(dataTypeId, \"Data Type\", \"data_type\"), type === \"sensor\" && inputGenerator(commentId, \"Comment\", \"comment\"));\n  });\n} // let sensorDataField = (\n//     <div className=\"input-container\">\n//         <label htmlFor={dataTypeId}>{`Data Type #${idx + 1}`}</label>\n//         <input\n//             type=\"text\"\n//             name={dataTypeId}\n//             data-id={idx}\n//             className={`${type}-data_type`}\n//         />\n//     </div>\n// );\n// let sensorCommentField = (\n//     <div className=\"input-container\">\n//         <label htmlFor={commentId}>{`Comment #${idx + 1}`}</label>\n//         <input\n//             type=\"text\"\n//             name={commentId}\n//             comment-id={idx}\n//             className={`${type}-commentId`}\n//         />\n//     </div>\n// );\n// return (\n//     <div key={idx}>\n//         <div className=\"input-container\">\n//             <label htmlFor={nameId}>{`Name #${idx + 1}`}</label>\n//             <input\n//                 type=\"text\"\n//                 name={nameId}\n//                 data-id={idx}\n//                 className={`${type}-name`}\n//             />\n//         </div>\n//         <div className=\"input-container\">\n//             <label htmlFor={valueId}>{`Value #${idx + 1}`}</label>\n//             <input\n//                 type=\"text\"\n//                 name={valueId}\n//                 data-id={idx}\n//                 className={`${type}-value`}\n//             />\n//         </div>\n// {type === \"sensor\" && sensorDataField}\n// {type === \"sensor\" && sensorCommentField}\n//     </div>\n// );","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\Input.js"],"names":["React","Input","props","type","capability","map","val","idx","nameId","valueId","dataTypeId","commentId","inputGenerator","idStrings","str1","str2"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,MACzBC,IADyB,GAChBD,KADgB,CACzBC,IADyB;AAEjC,SAAOD,KAAK,CAACE,UAAN,CAAiBC,GAAjB,CAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,QAAIC,MAAM,aAAML,IAAN,mBAAmBI,GAAnB,CAAV;AACA,QAAIE,OAAO,aAAMN,IAAN,oBAAoBI,GAApB,CAAX;AACA,QAAIG,UAAU,aAAMP,IAAN,wBAAwBI,GAAxB,CAAd;AACA,QAAII,SAAS,aAAMR,IAAN,sBAAsBI,GAAtB,CAAb;;AAEA,aAASK,cAAT,CAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC3C,aACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA+BC,IAA/B,eAAwCP,GAAG,GAAG,CAA9C,EADJ,EAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,IAAI,EAAEM,SAFV;AAGI,mBAASN,GAHb;AAII,QAAA,SAAS,YAAKJ,IAAL,cAAaY,IAAb,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAWH;;AAED,WACI;AAAK,MAAA,GAAG,EAAER,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKK,cAAc,CAACJ,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADnB,EAEKI,cAAc,CAACH,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAFnB,EAGKN,IAAI,KAAK,QAAT,IACGS,cAAc,CAACF,UAAD,EAAa,WAAb,EAA0B,WAA1B,CAJtB,EAKKP,IAAI,KAAK,QAAT,IACGS,cAAc,CAACD,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CANtB,CADJ;AAUH,GA9BM,CAAP;AA+BH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\n//creates input fields for each capability on click\r\nexport default function Input(props) {\r\n    const { type } = props;\r\n    return props.capability.map((val, idx) => {\r\n        let nameId = `${type}-name-${idx}`;\r\n        let valueId = `${type}-value-${idx}`;\r\n        let dataTypeId = `${type}-data_type-${idx}`;\r\n        let commentId = `${type}-comment-${idx}`;\r\n\r\n        function inputGenerator(idStrings, str1, str2) {\r\n            return (\r\n                <div className=\"input-container\">\r\n                    <label htmlFor={idStrings}>{`${str1} #${idx + 1}`}</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name={idStrings}\r\n                        data-id={idx}\r\n                        className={`${type}-${str2}`}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div key={idx}>\r\n                {inputGenerator(nameId, \"Name\", \"name\")}\r\n                {inputGenerator(valueId, \"Value\", \"value\")}\r\n                {type === \"sensor\" &&\r\n                    inputGenerator(dataTypeId, \"Data Type\", \"data_type\")}\r\n                {type === \"sensor\" &&\r\n                    inputGenerator(commentId, \"Comment\", \"comment\")}\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\n// let sensorDataField = (\r\n//     <div className=\"input-container\">\r\n//         <label htmlFor={dataTypeId}>{`Data Type #${idx + 1}`}</label>\r\n//         <input\r\n//             type=\"text\"\r\n//             name={dataTypeId}\r\n//             data-id={idx}\r\n//             className={`${type}-data_type`}\r\n//         />\r\n//     </div>\r\n// );\r\n// let sensorCommentField = (\r\n//     <div className=\"input-container\">\r\n//         <label htmlFor={commentId}>{`Comment #${idx + 1}`}</label>\r\n//         <input\r\n//             type=\"text\"\r\n//             name={commentId}\r\n//             comment-id={idx}\r\n//             className={`${type}-commentId`}\r\n//         />\r\n//     </div>\r\n// );\r\n\r\n// return (\r\n//     <div key={idx}>\r\n//         <div className=\"input-container\">\r\n//             <label htmlFor={nameId}>{`Name #${idx + 1}`}</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name={nameId}\r\n//                 data-id={idx}\r\n//                 className={`${type}-name`}\r\n//             />\r\n//         </div>\r\n//         <div className=\"input-container\">\r\n//             <label htmlFor={valueId}>{`Value #${idx + 1}`}</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name={valueId}\r\n//                 data-id={idx}\r\n//                 className={`${type}-value`}\r\n//             />\r\n//         </div>\r\n// {type === \"sensor\" && sensorDataField}\r\n// {type === \"sensor\" && sensorCommentField}\r\n//     </div>\r\n// );\r\n"]},"metadata":{},"sourceType":"module"}
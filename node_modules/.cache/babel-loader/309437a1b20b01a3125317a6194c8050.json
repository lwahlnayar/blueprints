{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rodney\\\\Desktop\\\\MDB-React-Free-npm\\\\src\\\\EditModal.js\";\nimport React from \"react\";\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\nimport Input from \"./Input\";\n\nvar EditModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditModal, _React$Component);\n\n  function EditModal(props) {\n    var _this;\n\n    _classCallCheck(this, EditModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditModal).call(this, props)); //form input data gets populated in THIS state and sent to parent state\n\n    _this.state = _objectSpread({}, _this.props.blueprintData);\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditModal, [{\n    key: \"reset\",\n    value: function reset() {\n      this.setState({\n        name: this.prevState.name,\n        comment: this.prevState.comment,\n        commands: this.prevState.commands,\n        sensors: this.prevState.sensors,\n        attributes: this.prevState.attributes\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        showModal: !this.state.showModal\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (e.target.dataset.cap === \"command\") {\n        var commands = _toConsumableArray(this.state.commands);\n\n        commands[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          commands: commands\n        });\n      } else if (e.target.dataset.cap === \"attribute\") {\n        var att = _toConsumableArray(this.state.attributes);\n\n        att[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          attributes: att\n        });\n      } else if (e.target.dataset.cap === \"sensor\") {\n        var sensors = _toConsumableArray(this.state.sensors);\n\n        sensors[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          sensors: sensors\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          commands = _this$state.commands,\n          attributes = _this$state.attributes,\n          sensors = _this$state.sensors,\n          name = _this$state.name,\n          comment = _this$state.comment;\n      var editBlueprint = this.props.editBlueprint;\n      return React.createElement(\"div\", {\n        className: \"createModal-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.prevState = _this2.state;\n\n          _this2.toggle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: function toggle() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        size: \"fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Edit Blueprint\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"blueprint-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Name\")), React.createElement(\"input\", {\n        value: name,\n        name: \"blueprint-name\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            name: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Comment\")), React.createElement(\"input\", {\n        value: comment,\n        name: \"comment\",\n        onChange: function onChange(e) {\n          _this2.setState({\n            comment: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Commands\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            commands: _toConsumableArray(_this2.state.commands).concat([{\n              name: \"\",\n              value: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Add Command\"), React.createElement(Input, {\n        type: \"command\",\n        handleChange: this.handleChange,\n        capability: commands,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Sensors\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            sensors: _toConsumableArray(_this2.state.sensors).concat([{\n              name: \"\",\n              value: \"\",\n              data_type: \"\",\n              comment: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Add Sensors\"), React.createElement(Input, {\n        type: \"sensor\",\n        handleChange: this.handleChange,\n        capability: sensors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Attributes\")), React.createElement(Button, {\n        color: \"green\",\n        onClick: function onClick() {\n          _this2.setState({\n            attributes: _toConsumableArray(_this2.state.attributes).concat([{\n              name: \"\",\n              value: \"\"\n            }])\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Add Attributes\"), React.createElement(Input, {\n        type: \"attribute\",\n        handleChange: this.handleChange,\n        capability: attributes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          _this2.reset();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.toggle();\n\n          editBlueprint(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Edit Blueprint\"))));\n    }\n  }]);\n\n  return EditModal;\n}(React.Component);\n\nexport { EditModal as default };","map":{"version":3,"sources":["C:\\Users\\Rodney\\Desktop\\MDB-React-Free-npm\\src\\EditModal.js"],"names":["React","Button","Modal","ModalBody","ModalHeader","ModalFooter","Input","EditModal","props","state","blueprintData","handleChange","bind","setState","name","prevState","comment","commands","sensors","attributes","showModal","e","target","dataset","cap","id","className","value","att","editBlueprint","toggle","reset","data_type","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from \"mdbreact\";\r\n\r\nimport Input from \"./Input\";\r\n\r\nexport default class EditModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //form input data gets populated in THIS state and sent to parent state\r\n        this.state = { ...this.props.blueprintData };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            name: this.prevState.name,\r\n            comment: this.prevState.comment,\r\n            commands: this.prevState.commands,\r\n            sensors: this.prevState.sensors,\r\n            attributes: this.prevState.attributes\r\n        });\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ showModal: !this.state.showModal });\r\n    }\r\n\r\n    handleChange(e) {\r\n        if (e.target.dataset.cap === \"command\") {\r\n            let commands = [...this.state.commands];\r\n            commands[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ commands });\r\n        } else if (e.target.dataset.cap === \"attribute\") {\r\n            let att = [...this.state.attributes];\r\n            att[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ attributes: att });\r\n        } else if (e.target.dataset.cap === \"sensor\") {\r\n            let sensors = [...this.state.sensors];\r\n            sensors[e.target.dataset.id][e.target.className] = e.target.value;\r\n            this.setState({ sensors });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { commands, attributes, sensors, name, comment } = this.state;\r\n        let { editBlueprint } = this.props;\r\n\r\n        return (\r\n            <div className=\"createModal-component\">\r\n                <Button\r\n                    color=\"green\"\r\n                    onClick={() => {\r\n                        this.prevState = this.state;\r\n                        this.toggle();\r\n                    }}\r\n                >\r\n                    Edit\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.showModal}\r\n                    toggle={() => {\r\n                        this.toggle();\r\n                        this.reset();\r\n                    }}\r\n                    size=\"fluid\"\r\n                >\r\n                    <ModalHeader\r\n                        toggle={() => {\r\n                            this.toggle();\r\n                            this.reset();\r\n                        }}\r\n                    >\r\n                        Edit Blueprint\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            <b>\r\n                                <label htmlFor=\"blueprint-name\">Name</label>\r\n                            </b>\r\n                            <input\r\n                                value={name}\r\n                                name=\"blueprint-name\"\r\n                                onChange={e => {\r\n                                    this.setState({ name: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <label htmlFor=\"comment\">Comment</label>\r\n                            </b>\r\n                            <input\r\n                                value={comment}\r\n                                name=\"comment\"\r\n                                onChange={e => {\r\n                                    this.setState({ comment: e.target.value });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Commands</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        commands: [\r\n                                            ...this.state.commands,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Command\r\n                            </Button>\r\n                            <Input\r\n                                type={\"command\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={commands}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Sensors</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        sensors: [\r\n                                            ...this.state.sensors,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\",\r\n                                                data_type: \"\",\r\n                                                comment: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Sensors\r\n                            </Button>\r\n                            <Input\r\n                                type={\"sensor\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={sensors}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>\r\n                                <p>Attributes</p>\r\n                            </b>\r\n                            <Button\r\n                                color=\"green\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        attributes: [\r\n                                            ...this.state.attributes,\r\n                                            {\r\n                                                name: \"\",\r\n                                                value: \"\"\r\n                                            }\r\n                                        ]\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Attributes\r\n                            </Button>\r\n                            <Input\r\n                                type={\"attribute\"}\r\n                                handleChange={this.handleChange}\r\n                                capability={attributes}\r\n                            />\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                this.reset();\r\n                            }}\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggle();\r\n                                editBlueprint(this.state);\r\n                            }}\r\n                        >\r\n                            Edit Blueprint\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}